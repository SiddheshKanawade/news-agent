FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim AS builder

# Set work directory
WORKDIR /app

# Copy dependency files first for caching
COPY ./pyproject.toml ./uv.lock ./

# Enable bytecode compilation & caching
ENV UV_COMPILE_BYTECODE=1
ENV UV_LINK_MODE=copy

# Install dependencies into .venv (without project yet)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-install-project --no-dev --no-editable

# Copy source code (preserve directory structure)
COPY ./service ./service

# Install project itself (reusing cached deps)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev --no-editable

# ---------- Runtime stage ----------
FROM python:3.12-slim-bookworm AS runtime

# Create app user (avoid running as root in prod)
RUN useradd -m appuser

WORKDIR /app

# Copy only what's needed from builder
COPY --from=builder /app/.venv /app/.venv
COPY --from=builder /app/service ./service

# Ensure venv executables and packages are accessible
ENV PATH="/app/.venv/bin:$PATH"
# Add venv site-packages to Python path so it can find installed packages
ENV PYTHONPATH="/app/.venv/lib/python3.12/site-packages:/app:$PYTHONPATH"
ENV VIRTUAL_ENV="/app/.venv"

# Drop privileges
USER appuser

# Expose Port
EXPOSE 8000

# Run the main script
CMD ["python", "service/api.py"]
